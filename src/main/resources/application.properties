#
# Application properties
#
server.port=8009
spring.application.name=mollysclub


#
# JDBC properties - H2
#
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false

#
# MULTIPART PROPERTIES
#
### Enable multipart uploads
spring.servlet.multipart.enabled=true
### Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
### Max file size.
spring.servlet.multipart.max-file-size=20MB
### Max Request Size
spring.servlet.multipart.max-request-size=20MB

#
## FILE STORAGE PROPERTIES
#
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=/uploads


#
# JDBC properties - MySQL DB
#
# spring.datasource.url=jdbc:mysql://localhost:3306/javakitdb?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
# spring.datasource.username=javakitdbadmin
# spring.datasource.password=p@ssw0rd

# #
# ## Hibernate Properties
# ### The SQL dialect makes Hibernate generate better SQL for the chosen database
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# ### spring.jpa.hibernate.ddl-auto - will automatically create/update the tables in the database 
# ### according to the entities in our application.
# spring.jpa.hibernate.ddl-auto=update

#
# Spring Data REST Properties
#
# spring.data.rest.base-path=/api/v1
# spring.data.rest.default-page-size=10
# spring.data.rest.max-page-size=50

#
# Spring Actuator Properties
#
# Expose all actuator endpoints
# management.endpoints.enabled-by-default=true
# management.endpoints.web.exposure.include=*
# # Info Metrics available at /actuator/info
# info.app.name=PeopleOps
# info.app.description=Resource management application
# info.app.version=1.0.0
# Thread Dump available at /actuator/threaddump
# Request Mappings available at /actuator/mappings

#
# Security using application properties
#
#spring.security.user.name=admin
#spring.security.user.password=p@ssw0rd

#
# Security JDBC properties - MySQL DB
#
# security.datasource.url=jdbc:mysql://localhost:3306/peopleopsdb?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC

#
# JDBC properties - PostGresSQL DB
#
# spring.datasource.url=jdbc:postgresql://localhost:5432/mollysclub_db
# spring.datasource.username=mollysclub_admin
# spring.datasource.password=P@ssw0rd
# spring.jpa.database-platform=org.hibernate.spatial.dialect.postgis.PostgisDialect
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.jpa.hibernate.ddl-auto=update


#
# Swagger properties
#
#To execute the Spring Boot REST Api application, we were using the below commands
#
#In Dev environment-
#
#nohup java -jar -Dspring.profiles.active=dev target/myapp-1.0.jar &

# > java -jar -Dspring.profiles.active=dev target/myapp-1.0.jar --server.port=8080

#In Production environment-
#
#nohup java -jar -Dspring.profiles.active=prod target/myapp-1.0.jar &
app.swagger.on=true

# 
# JWT Token Properties.
#
app.jwt.secretKey=AWFNJJHLLWPZMFJajeuncz5879APONZVAW2ncmbORMZNTQPWMABXZMQPIEYXVANHE
#tokenExpirationAfterMins =>  30mins
app.jwt.tokenExpirationAfterMins=30
app.jwt.tokenPrefix=Bearer 
app.jwt.headerString=Authorization
app.jwt.signupUrl=/api/v1/auth/register


#
# AWS Properties.
#
app.aws.access-key=AKIAZ233I4UOCI6J6AIL
app.aws.secret-key=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
app.aws.region=eu-west-2
app.aws.s3.bucket-name=devdezyn
app.aws.s3.service-url=https://s3-eu-west-2.amazonaws.com
app.aws.s3.application-folder=applicationData/Mollysclub

#
# Java Mail - AWS
#
spring.mail.host=email-smtp.us-east-1.amazonaws.com
spring.mail.username=#AWS_SES_USERNAME#
spring.mail.password=#AWS_SES_PASSWORD#
spring.mail.properties.mail.transport.protocol=smtp
# Set AWS PORT
spring.mail.properties.mail.smtp.port=587
spring.mail.properties.mail.smtp.ssl.trust=*
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.starttls.required=true
#AWS properties.
app.mail.aws.ses.host=email-smtp.us-east-1.amazonaws.com
app.mail.aws.ses.username=AKIAZ233I4UOJP5K45MF
app.mail.aws.ses.password=BEISU9KFpnNWRwyUbqE2JCNdqgBLJII388Mrf9Q8mkKx
app.mail.aws.ses.port=587
# Custom properties.
app.email.from=theophilusighalo@gmail.com
app.email.from-name=Philzstizles

#
# Cloudinary Properties.
#
app.cloudinary.cloud-name=devdezyn
app.cloudinary.api-key=727272845221756
app.cloudinary.api-secret=Q4KVFPot7UfcXujubvRP6kwBcHY


#
# Twilio Properties.
#
app.twilio.account-sid=ACa43ee4d862f4465ae36b98a45df66cd4
app.twilio.auth-token=8926d1f3fb760cb30d5e9ea44fb6c5aa
app.twilio.number=16305282264

#
# Elastic search.
#
spring.elasticsearch.rest.uris=localhost:9200
spring.elasticsearch.rest.connection-timeout=1s
spring.elasticsearch.rest.read-timeout=1m
spring.elasticsearch.rest.password=
spring.elasticsearch.rest.username=


#
# Graphql properties
#
graphql.servlet.mapping: /apis/graphql